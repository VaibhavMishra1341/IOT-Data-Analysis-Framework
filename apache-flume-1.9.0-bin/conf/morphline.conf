morphlines : [
  {
    id : morphline1
    importCommands : ["org.kitesdk.**"] 
    commands : [                  
      { readLine {charset : UTF-8 }}
      { grok {
          dictionaryFiles: [/home/hdoop/Flume/grokPatterns]
          expressions : {
            message : """(?<title>[a-zA-z\s]*),(?<desc>[\w\s-]*),%{WORD:type},%{WORD:medium},(?<time>[0-9/-:A-Z\s]*),%{NUMBER:value},(?<units>[\w\s]*),(?<abbr>[\w/\s]*),%{WORD:period},%{WORD:ID},%{WORD:rID},(?<mID>[0-9.]+?(?:[E+0-9]+)),(?<recordID>[0-9.]+?(?:[E+0-9]+)),%{NUMBER:lat},%{NUMBER:longitude},%{GREEDYDATA:location}"""
          }
        }
      }
     {removeFields {blacklist: ["literal:mID", "literal:recordID"]}}
     { java { code: """  
        String title =  (String) record.getFirstValue("title");
        String desc = (String) record.getFirstValue("desc");
        String type = (String)record.getFirstValue("type");
        String medium = (String)record.getFirstValue("medium");
        String time = (String)record.getFirstValue("time");
        String value =  (String) record.getFirstValue("value");
        String units = (String) record.getFirstValue("units");
        String abbr = (String)record.getFirstValue("abbr");
        String period = (String)record.getFirstValue("period");
        String ID = (String)record.getFirstValue("ID");
        String rID = (String)record.getFirstValue("rID");
        String lat = (String)record.getFirstValue("lat");
        String longitude = (String)record.getFirstValue("longitude");
        String location = (String)record.getFirstValue("location");
        Map<String,Object> map = new HashMap<>();
        map.put("title",title);
        map.put("desc",desc);
	map.put("type",type);
	map.put("medium",medium);
	map.put("time",time);
	map.put("value",value);
        map.put("units",units);
	map.put("abbr",abbr);
	map.put("period",period);
	map.put("ID",ID);
	map.put("rID",rID);
        map.put("lat",lat);
	map.put("longitude",longitude);
	map.put("location",location); record.replaceValues("_attachment_body",map.toString().getBytes(Charsets.UTF_8));
        return child.process(record);
      """ 
      } }
      # log the record at INFO level to SLF4J
      { logInfo { format : "output record: {}", args : ["@{}"] } }
    ]
  }
]
